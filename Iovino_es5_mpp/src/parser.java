
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

import nodes.ExprNode;
import nodes.otherops.*;
import nodes.leafs.*;
import nodes.statements.*;
import nodes.ops.*;
import java.util.ArrayList;
import tree.XMLTreeGenerator;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\131\000\002\002\005\000\002\002\004\000\002\003" +
    "\002\000\002\003\004\000\002\005\010\000\002\004\002" +
    "\000\002\004\004\000\002\006\005\000\002\006\005\000" +
    "\002\011\003\000\002\011\003\000\002\011\003\000\002" +
    "\011\003\000\002\012\003\000\002\012\005\000\002\012" +
    "\005\000\002\012\007\000\002\013\005\000\002\013\011" +
    "\000\002\013\015\000\002\013\007\000\002\015\003\000" +
    "\002\015\003\000\002\015\003\000\002\015\003\000\002" +
    "\015\003\000\002\015\004\000\002\015\004\000\002\010" +
    "\016\000\002\010\014\000\002\016\002\000\002\016\003" +
    "\000\002\017\003\000\002\017\005\000\002\020\004\000" +
    "\002\020\005\000\002\007\002\000\002\007\004\000\002" +
    "\021\004\000\002\021\004\000\002\021\004\000\002\021" +
    "\004\000\002\021\004\000\002\021\004\000\002\021\005" +
    "\000\002\022\012\000\002\030\002\000\002\030\005\000" +
    "\002\023\011\000\002\024\005\000\002\024\004\000\002" +
    "\031\003\000\002\031\005\000\002\025\004\000\002\025" +
    "\004\000\002\025\004\000\002\025\004\000\002\026\005" +
    "\000\002\027\006\000\002\027\005\000\002\032\003\000" +
    "\002\032\005\000\002\032\004\000\002\032\006\000\002" +
    "\014\003\000\002\014\003\000\002\014\003\000\002\014" +
    "\003\000\002\014\003\000\002\014\003\000\002\014\003" +
    "\000\002\014\005\000\002\014\005\000\002\014\005\000" +
    "\002\014\005\000\002\014\005\000\002\014\005\000\002" +
    "\014\005\000\002\014\005\000\002\014\005\000\002\014" +
    "\005\000\002\014\005\000\002\014\005\000\002\014\005" +
    "\000\002\014\005\000\002\014\005\000\002\014\004\000" +
    "\002\014\004\000\002\014\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\303\000\020\004\uffff\006\006\007\012\010\014\011" +
    "\010\015\uffff\063\013\001\002\000\004\005\275\001\002" +
    "\000\004\002\274\001\002\000\040\005\ufff8\006\ufff8\007" +
    "\ufff8\010\ufff8\011\ufff8\016\ufff8\017\ufff8\022\ufff8\024\ufff8" +
    "\025\ufff8\026\ufff8\027\ufff8\030\ufff8\061\ufff8\063\ufff8\001" +
    "\002\000\006\004\ufffc\015\145\001\002\000\040\005\ufff7" +
    "\006\ufff7\007\ufff7\010\ufff7\011\ufff7\016\ufff7\017\ufff7\022" +
    "\ufff7\024\ufff7\025\ufff7\026\ufff7\027\ufff7\030\ufff7\061\ufff7" +
    "\063\ufff7\001\002\000\046\004\uffff\005\uffff\006\006\007" +
    "\012\010\014\011\010\015\uffff\016\uffff\017\uffff\021\uffff" +
    "\022\uffff\024\uffff\025\uffff\026\uffff\027\uffff\030\uffff\061" +
    "\uffff\063\013\001\002\000\040\005\ufff5\006\ufff5\007\ufff5" +
    "\010\ufff5\011\ufff5\016\ufff5\017\ufff5\022\ufff5\024\ufff5\025" +
    "\ufff5\026\ufff5\027\ufff5\030\ufff5\061\ufff5\063\ufff5\001\002" +
    "\000\004\005\015\001\002\000\040\005\ufff6\006\ufff6\007" +
    "\ufff6\010\ufff6\011\ufff6\016\ufff6\017\ufff6\022\ufff6\024\ufff6" +
    "\025\ufff6\026\ufff6\027\ufff6\030\ufff6\061\ufff6\063\ufff6\001" +
    "\002\000\006\031\035\060\034\001\002\000\006\057\020" +
    "\060\017\001\002\000\004\005\021\001\002\000\046\004" +
    "\ufff9\005\ufff9\006\ufff9\007\ufff9\010\ufff9\011\ufff9\015\ufff9" +
    "\016\ufff9\017\ufff9\021\ufff9\022\ufff9\024\ufff9\025\ufff9\026" +
    "\ufff9\027\ufff9\030\ufff9\061\ufff9\063\ufff9\001\002\000\004" +
    "\031\022\001\002\000\016\033\031\052\025\053\030\054" +
    "\024\055\026\056\023\001\002\000\006\057\uffe8\060\uffe8" +
    "\001\002\000\006\057\uffec\060\uffec\001\002\000\006\057" +
    "\uffea\060\uffea\001\002\000\006\057\uffeb\060\uffeb\001\002" +
    "\000\006\057\uffed\060\uffed\001\002\000\006\057\uffe9\060" +
    "\uffe9\001\002\000\006\054\032\055\033\001\002\000\006" +
    "\057\uffe7\060\uffe7\001\002\000\006\057\uffe6\060\uffe6\001" +
    "\002\000\004\005\126\001\002\000\024\005\047\012\044" +
    "\033\036\051\050\052\041\053\045\054\046\055\037\056" +
    "\042\001\002\000\024\005\047\012\044\033\036\051\050" +
    "\052\041\053\045\054\046\055\037\056\042\001\002\000" +
    "\052\013\uffc0\020\uffc0\023\uffc0\032\uffc0\033\uffc0\034\uffc0" +
    "\035\uffc0\036\uffc0\037\uffc0\040\uffc0\041\uffc0\042\uffc0\043" +
    "\uffc0\044\uffc0\045\uffc0\046\uffc0\047\uffc0\050\uffc0\057\uffc0" +
    "\060\uffc0\001\002\000\044\032\057\033\052\034\063\035" +
    "\070\036\061\037\054\040\064\041\056\042\065\043\066" +
    "\044\060\045\062\046\055\047\053\050\067\057\ufff0\060" +
    "\ufff0\001\002\000\052\013\uffbf\020\uffbf\023\uffbf\032\uffbf" +
    "\033\uffbf\034\uffbf\035\uffbf\036\uffbf\037\uffbf\040\uffbf\041" +
    "\uffbf\042\uffbf\043\uffbf\044\uffbf\045\uffbf\046\uffbf\047\uffbf" +
    "\050\uffbf\057\uffbf\060\uffbf\001\002\000\052\013\uffbd\020" +
    "\uffbd\023\uffbd\032\uffbd\033\uffbd\034\uffbd\035\uffbd\036\uffbd" +
    "\037\uffbd\040\uffbd\041\uffbd\042\uffbd\043\uffbd\044\uffbd\045" +
    "\uffbd\046\uffbd\047\uffbd\050\uffbd\057\uffbd\060\uffbd\001\002" +
    "\000\052\013\uffbb\020\uffbb\023\uffbb\032\uffbb\033\uffbb\034" +
    "\uffbb\035\uffbb\036\uffbb\037\uffbb\040\uffbb\041\uffbb\042\uffbb" +
    "\043\uffbb\044\uffbb\045\uffbb\046\uffbb\047\uffbb\050\uffbb\057" +
    "\uffbb\060\uffbb\001\002\000\024\005\047\012\044\033\036" +
    "\051\050\052\041\053\045\054\046\055\037\056\042\001" +
    "\002\000\052\013\uffbe\020\uffbe\023\uffbe\032\uffbe\033\uffbe" +
    "\034\uffbe\035\uffbe\036\uffbe\037\uffbe\040\uffbe\041\uffbe\042" +
    "\uffbe\043\uffbe\044\uffbe\045\uffbe\046\uffbe\047\uffbe\050\uffbe" +
    "\057\uffbe\060\uffbe\001\002\000\052\013\uffc1\020\uffc1\023" +
    "\uffc1\032\uffc1\033\uffc1\034\uffc1\035\uffc1\036\uffc1\037\uffc1" +
    "\040\uffc1\041\uffc1\042\uffc1\043\uffc1\044\uffc1\045\uffc1\046" +
    "\uffc1\047\uffc1\050\uffc1\057\uffc1\060\uffc1\001\002\000\054" +
    "\012\110\013\uffbc\020\uffbc\023\uffbc\032\uffbc\033\uffbc\034" +
    "\uffbc\035\uffbc\036\uffbc\037\uffbc\040\uffbc\041\uffbc\042\uffbc" +
    "\043\uffbc\044\uffbc\045\uffbc\046\uffbc\047\uffbc\050\uffbc\057" +
    "\uffbc\060\uffbc\001\002\000\024\005\047\012\044\033\036" +
    "\051\050\052\041\053\045\054\046\055\037\056\042\001" +
    "\002\000\052\013\uffaa\020\uffaa\023\uffaa\032\057\033\052" +
    "\034\063\035\070\036\061\037\054\040\064\041\056\042" +
    "\065\043\066\044\060\045\062\046\055\047\uffaa\050\uffaa" +
    "\057\uffaa\060\uffaa\001\002\000\024\005\047\012\044\033" +
    "\036\051\050\052\041\053\045\054\046\055\037\056\042" +
    "\001\002\000\024\005\047\012\044\033\036\051\050\052" +
    "\041\053\045\054\046\055\037\056\042\001\002\000\024" +
    "\005\047\012\044\033\036\051\050\052\041\053\045\054" +
    "\046\055\037\056\042\001\002\000\024\005\047\012\044" +
    "\033\036\051\050\052\041\053\045\054\046\055\037\056" +
    "\042\001\002\000\024\005\047\012\044\033\036\051\050" +
    "\052\041\053\045\054\046\055\037\056\042\001\002\000" +
    "\024\005\047\012\044\033\036\051\050\052\041\053\045" +
    "\054\046\055\037\056\042\001\002\000\024\005\047\012" +
    "\044\033\036\051\050\052\041\053\045\054\046\055\037" +
    "\056\042\001\002\000\024\005\047\012\044\033\036\051" +
    "\050\052\041\053\045\054\046\055\037\056\042\001\002" +
    "\000\024\005\047\012\044\033\036\051\050\052\041\053" +
    "\045\054\046\055\037\056\042\001\002\000\024\005\047" +
    "\012\044\033\036\051\050\052\041\053\045\054\046\055" +
    "\037\056\042\001\002\000\024\005\047\012\044\033\036" +
    "\051\050\052\041\053\045\054\046\055\037\056\042\001" +
    "\002\000\024\005\047\012\044\033\036\051\050\052\041" +
    "\053\045\054\046\055\037\056\042\001\002\000\024\005" +
    "\047\012\044\033\036\051\050\052\041\053\045\054\046" +
    "\055\037\056\042\001\002\000\024\005\047\012\044\033" +
    "\036\051\050\052\041\053\045\054\046\055\037\056\042" +
    "\001\002\000\024\005\047\012\044\033\036\051\050\052" +
    "\041\053\045\054\046\055\037\056\042\001\002\000\052" +
    "\013\uffb6\020\uffb6\023\uffb6\032\uffb6\033\uffb6\034\uffb6\035" +
    "\uffb6\036\uffb6\037\054\040\uffb6\041\uffb6\042\uffb6\043\uffb6" +
    "\044\uffb6\045\uffb6\046\uffb6\047\uffb6\050\uffb6\057\uffb6\060" +
    "\uffb6\001\002\000\052\013\uffb2\020\uffb2\023\uffb2\032\057" +
    "\033\052\034\063\035\070\036\061\037\054\040\064\041" +
    "\056\042\065\043\066\044\060\045\062\046\055\047\053" +
    "\050\uffb2\057\uffb2\060\uffb2\001\002\000\036\013\uffaf\020" +
    "\uffaf\023\uffaf\032\057\033\052\034\063\035\070\036\061" +
    "\037\054\040\064\047\uffaf\050\uffaf\057\uffaf\060\uffaf\001" +
    "\002\000\036\013\uffac\020\uffac\023\uffac\032\057\033\052" +
    "\034\063\035\070\036\061\037\054\040\064\047\uffac\050" +
    "\uffac\057\uffac\060\uffac\001\002\000\052\013\uffb3\020\uffb3" +
    "\023\uffb3\032\057\033\052\034\063\035\070\036\061\037" +
    "\054\040\uffb3\041\uffb3\042\uffb3\043\uffb3\044\uffb3\045\uffb3" +
    "\046\uffb3\047\uffb3\050\uffb3\057\uffb3\060\uffb3\001\002\000" +
    "\052\013\uffb8\020\uffb8\023\uffb8\032\uffb8\033\uffb8\034\uffb8" +
    "\035\070\036\061\037\054\040\uffb8\041\uffb8\042\uffb8\043" +
    "\uffb8\044\uffb8\045\uffb8\046\uffb8\047\uffb8\050\uffb8\057\uffb8" +
    "\060\uffb8\001\002\000\036\013\uffb1\020\uffb1\023\uffb1\032" +
    "\057\033\052\034\063\035\070\036\061\037\054\040\064" +
    "\047\uffb1\050\uffb1\057\uffb1\060\uffb1\001\002\000\052\013" +
    "\uffb7\020\uffb7\023\uffb7\032\uffb7\033\uffb7\034\uffb7\035\070" +
    "\036\uffb7\037\054\040\uffb7\041\uffb7\042\uffb7\043\uffb7\044" +
    "\uffb7\045\uffb7\046\uffb7\047\uffb7\050\uffb7\057\uffb7\060\uffb7" +
    "\001\002\000\036\013\uffae\020\uffae\023\uffae\032\057\033" +
    "\052\034\063\035\070\036\061\037\054\040\064\047\uffae" +
    "\050\uffae\057\uffae\060\uffae\001\002\000\052\013\uffba\020" +
    "\uffba\023\uffba\032\uffba\033\052\034\063\035\070\036\061" +
    "\037\054\040\uffba\041\uffba\042\uffba\043\uffba\044\uffba\045" +
    "\uffba\046\uffba\047\uffba\050\uffba\057\uffba\060\uffba\001\002" +
    "\000\036\013\uffad\020\uffad\023\uffad\032\057\033\052\034" +
    "\063\035\070\036\061\037\054\040\064\047\uffad\050\uffad" +
    "\057\uffad\060\uffad\001\002\000\036\013\uffb0\020\uffb0\023" +
    "\uffb0\032\057\033\052\034\063\035\070\036\061\037\054" +
    "\040\064\047\uffb0\050\uffb0\057\uffb0\060\uffb0\001\002\000" +
    "\052\013\uffb4\020\uffb4\023\uffb4\032\uffb4\033\uffb4\034\uffb4" +
    "\035\uffb4\036\uffb4\037\054\040\uffb4\041\uffb4\042\uffb4\043" +
    "\uffb4\044\uffb4\045\uffb4\046\uffb4\047\uffb4\050\uffb4\057\uffb4" +
    "\060\uffb4\001\002\000\052\013\uffb5\020\uffb5\023\uffb5\032" +
    "\057\033\052\034\063\035\070\036\061\037\054\040\064" +
    "\041\056\042\065\043\066\044\060\045\062\046\055\047" +
    "\uffb5\050\uffb5\057\uffb5\060\uffb5\001\002\000\052\013\uffb9" +
    "\020\uffb9\023\uffb9\032\uffb9\033\uffb9\034\063\035\070\036" +
    "\061\037\054\040\uffb9\041\uffb9\042\uffb9\043\uffb9\044\uffb9" +
    "\045\uffb9\046\uffb9\047\uffb9\050\uffb9\057\uffb9\060\uffb9\001" +
    "\002\000\030\005\047\012\044\013\114\033\036\051\050" +
    "\052\041\053\045\054\046\055\037\056\042\062\112\001" +
    "\002\000\044\013\uffc5\032\057\033\052\034\063\035\070" +
    "\036\061\037\054\040\064\041\056\042\065\043\066\044" +
    "\060\045\062\046\055\047\053\050\067\060\121\001\002" +
    "\000\004\005\116\001\002\000\004\013\115\001\002\000" +
    "\052\013\uffc6\020\uffc6\023\uffc6\032\uffc6\033\uffc6\034\uffc6" +
    "\035\uffc6\036\uffc6\037\uffc6\040\uffc6\041\uffc6\042\uffc6\043" +
    "\uffc6\044\uffc6\045\uffc6\046\uffc6\047\uffc6\050\uffc6\057\uffc6" +
    "\060\uffc6\001\002\000\052\013\uffc7\020\uffc7\023\uffc7\032" +
    "\uffc7\033\uffc7\034\uffc7\035\uffc7\036\uffc7\037\uffc7\040\uffc7" +
    "\041\uffc7\042\uffc7\043\uffc7\044\uffc7\045\uffc7\046\uffc7\047" +
    "\uffc7\050\uffc7\057\uffc7\060\uffc7\001\002\000\006\013\uffc3" +
    "\060\117\001\002\000\026\005\047\012\044\033\036\051" +
    "\050\052\041\053\045\054\046\055\037\056\042\062\112" +
    "\001\002\000\004\013\uffc2\001\002\000\026\005\047\012" +
    "\044\033\036\051\050\052\041\053\045\054\046\055\037" +
    "\056\042\062\112\001\002\000\004\013\uffc4\001\002\000" +
    "\042\013\124\032\057\033\052\034\063\035\070\036\061" +
    "\037\054\040\064\041\056\042\065\043\066\044\060\045" +
    "\062\046\055\047\053\050\067\001\002\000\052\013\uffa9" +
    "\020\uffa9\023\uffa9\032\uffa9\033\uffa9\034\uffa9\035\uffa9\036" +
    "\uffa9\037\uffa9\040\uffa9\041\uffa9\042\uffa9\043\uffa9\044\uffa9" +
    "\045\uffa9\046\uffa9\047\uffa9\050\uffa9\057\uffa9\060\uffa9\001" +
    "\002\000\052\013\uffab\020\uffab\023\uffab\032\uffab\033\uffab" +
    "\034\063\035\070\036\061\037\054\040\uffab\041\uffab\042" +
    "\uffab\043\uffab\044\uffab\045\uffab\046\uffab\047\uffab\050\uffab" +
    "\057\uffab\060\uffab\001\002\000\006\031\130\060\127\001" +
    "\002\000\004\005\134\001\002\000\024\005\047\012\044" +
    "\033\036\051\050\052\041\053\045\054\046\055\037\056" +
    "\042\001\002\000\042\032\057\033\052\034\063\035\070" +
    "\036\061\037\054\040\064\041\056\042\065\043\066\044" +
    "\060\045\062\046\055\047\053\050\067\060\132\001\002" +
    "\000\024\005\047\012\044\033\036\051\050\052\041\053" +
    "\045\054\046\055\037\056\042\001\002\000\044\032\057" +
    "\033\052\034\063\035\070\036\061\037\054\040\064\041" +
    "\056\042\065\043\066\044\060\045\062\046\055\047\053" +
    "\050\067\057\uffef\060\uffef\001\002\000\004\031\135\001" +
    "\002\000\024\005\047\012\044\033\036\051\050\052\041" +
    "\053\045\054\046\055\037\056\042\001\002\000\042\032" +
    "\057\033\052\034\063\035\070\036\061\037\054\040\064" +
    "\041\056\042\065\043\066\044\060\045\062\046\055\047" +
    "\053\050\067\060\137\001\002\000\024\005\047\012\044" +
    "\033\036\051\050\052\041\053\045\054\046\055\037\056" +
    "\042\001\002\000\042\032\057\033\052\034\063\035\070" +
    "\036\061\037\054\040\064\041\056\042\065\043\066\044" +
    "\060\045\062\046\055\047\053\050\067\060\141\001\002" +
    "\000\024\005\047\012\044\033\036\051\050\052\041\053" +
    "\045\054\046\055\037\056\042\001\002\000\044\032\057" +
    "\033\052\034\063\035\070\036\061\037\054\040\064\041" +
    "\056\042\065\043\066\044\060\045\062\046\055\047\053" +
    "\050\067\057\uffee\060\uffee\001\002\000\034\004\ufffe\005" +
    "\ufffe\015\ufffe\016\ufffe\017\ufffe\021\ufffe\022\ufffe\024\ufffe" +
    "\025\ufffe\026\ufffe\027\ufffe\030\ufffe\061\ufffe\001\002\000" +
    "\006\004\ufffc\015\145\001\002\000\004\005\242\001\002" +
    "\000\004\004\147\001\002\000\040\005\uffff\006\006\007" +
    "\012\010\014\011\010\016\uffff\017\uffff\022\uffff\024\uffff" +
    "\025\uffff\026\uffff\027\uffff\030\uffff\061\uffff\063\013\001" +
    "\002\000\004\002\001\001\002\000\026\005\164\016\uffdd" +
    "\017\161\022\153\024\152\025\165\026\156\027\172\030" +
    "\155\061\170\001\002\000\004\005\235\001\002\000\024" +
    "\005\047\012\044\033\036\051\050\052\041\053\045\054" +
    "\046\055\037\056\042\001\002\000\004\057\226\001\002" +
    "\000\024\005\047\012\044\033\036\051\050\052\041\053" +
    "\045\054\046\055\037\056\042\001\002\000\024\005\047" +
    "\012\044\033\036\051\050\052\041\053\045\054\046\055" +
    "\037\056\042\001\002\000\004\057\223\001\002\000\004" +
    "\057\222\001\002\000\024\005\047\012\044\033\036\051" +
    "\050\052\041\053\045\054\046\055\037\056\042\001\002" +
    "\000\004\057\207\001\002\000\004\016\204\001\002\000" +
    "\006\012\110\031\202\001\002\000\024\005\047\012\044" +
    "\033\036\051\050\052\041\053\045\054\046\055\037\056" +
    "\042\001\002\000\030\005\164\016\uffdd\017\161\021\uffdd" +
    "\022\153\024\152\025\165\026\156\027\172\030\155\061" +
    "\170\001\002\000\004\057\177\001\002\000\024\005\047" +
    "\012\044\033\036\051\050\052\041\053\045\054\046\055" +
    "\037\056\042\001\002\000\004\057\174\001\002\000\024" +
    "\005\047\012\044\033\036\051\050\052\041\053\045\054" +
    "\046\055\037\056\042\001\002\000\042\032\057\033\052" +
    "\034\063\035\070\036\061\037\054\040\064\041\056\042" +
    "\065\043\066\044\060\045\062\046\055\047\053\050\067" +
    "\057\uffc9\001\002\000\030\005\uffd9\016\uffd9\017\uffd9\021" +
    "\uffd9\022\uffd9\024\uffd9\025\uffd9\026\uffd9\027\uffd9\030\uffd9" +
    "\061\uffd9\001\002\000\042\032\057\033\052\034\063\035" +
    "\070\036\061\037\054\040\064\041\056\042\065\043\066" +
    "\044\060\045\062\046\055\047\053\050\067\057\176\001" +
    "\002\000\030\005\uffd5\016\uffd5\017\uffd5\021\uffd5\022\uffd5" +
    "\024\uffd5\025\uffd5\026\uffd5\027\uffd5\030\uffd5\061\uffd5\001" +
    "\002\000\030\005\uffd8\016\uffd8\017\uffd8\021\uffd8\022\uffd8" +
    "\024\uffd8\025\uffd8\026\uffd8\027\uffd8\030\uffd8\061\uffd8\001" +
    "\002\000\006\016\uffdc\021\uffdc\001\002\000\042\032\057" +
    "\033\052\034\063\035\070\036\061\037\054\040\064\041" +
    "\056\042\065\043\066\044\060\045\062\046\055\047\053" +
    "\050\067\057\uffcc\001\002\000\024\005\047\012\044\033" +
    "\036\051\050\052\041\053\045\054\046\055\037\056\042" +
    "\001\002\000\042\032\057\033\052\034\063\035\070\036" +
    "\061\037\054\040\064\041\056\042\065\043\066\044\060" +
    "\045\062\046\055\047\053\050\067\057\uffc8\001\002\000" +
    "\004\004\205\001\002\000\004\057\206\001\002\000\004" +
    "\002\ufffd\001\002\000\030\005\uffd7\016\uffd7\017\uffd7\021" +
    "\uffd7\022\uffd7\024\uffd7\025\uffd7\026\uffd7\027\uffd7\030\uffd7" +
    "\061\uffd7\001\002\000\042\020\211\032\057\033\052\034" +
    "\063\035\070\036\061\037\054\040\064\041\056\042\065" +
    "\043\066\044\060\045\062\046\055\047\053\050\067\001" +
    "\002\000\042\005\uffff\006\006\007\012\010\014\011\010" +
    "\016\uffff\017\uffff\021\uffff\022\uffff\024\uffff\025\uffff\026" +
    "\uffff\027\uffff\030\uffff\061\uffff\063\013\001\002\000\030" +
    "\005\164\016\uffdd\017\161\021\uffdd\022\153\024\152\025" +
    "\165\026\156\027\172\030\155\061\170\001\002\000\006" +
    "\016\uffd3\021\214\001\002\000\040\005\uffff\006\006\007" +
    "\012\010\014\011\010\016\uffff\017\uffff\022\uffff\024\uffff" +
    "\025\uffff\026\uffff\027\uffff\030\uffff\061\uffff\063\013\001" +
    "\002\000\004\016\216\001\002\000\004\017\217\001\002" +
    "\000\004\057\uffd4\001\002\000\026\005\164\016\uffdd\017" +
    "\161\022\153\024\152\025\165\026\156\027\172\030\155" +
    "\061\170\001\002\000\004\016\uffd2\001\002\000\030\005" +
    "\uffdb\016\uffdb\017\uffdb\021\uffdb\022\uffdb\024\uffdb\025\uffdb" +
    "\026\uffdb\027\uffdb\030\uffdb\061\uffdb\001\002\000\030\005" +
    "\uffd6\016\uffd6\017\uffd6\021\uffd6\022\uffd6\024\uffd6\025\uffd6" +
    "\026\uffd6\027\uffd6\030\uffd6\061\uffd6\001\002\000\042\032" +
    "\057\033\052\034\063\035\070\036\061\037\054\040\064" +
    "\041\056\042\065\043\066\044\060\045\062\046\055\047" +
    "\053\050\067\057\uffcb\001\002\000\042\032\057\033\052" +
    "\034\063\035\070\036\061\037\054\040\064\041\056\042" +
    "\065\043\066\044\060\045\062\046\055\047\053\050\067" +
    "\057\uffca\001\002\000\030\005\uffda\016\uffda\017\uffda\021" +
    "\uffda\022\uffda\024\uffda\025\uffda\026\uffda\027\uffda\030\uffda" +
    "\061\uffda\001\002\000\042\023\230\032\057\033\052\034" +
    "\063\035\070\036\061\037\054\040\064\041\056\042\065" +
    "\043\066\044\060\045\062\046\055\047\053\050\067\001" +
    "\002\000\040\005\uffff\006\006\007\012\010\014\011\010" +
    "\016\uffff\017\uffff\022\uffff\024\uffff\025\uffff\026\uffff\027" +
    "\uffff\030\uffff\061\uffff\063\013\001\002\000\026\005\164" +
    "\016\uffdd\017\161\022\153\024\152\025\165\026\156\027" +
    "\172\030\155\061\170\001\002\000\004\016\233\001\002" +
    "\000\004\023\234\001\002\000\004\057\uffd1\001\002\000" +
    "\030\005\uffce\012\uffce\033\uffce\051\uffce\052\uffce\053\uffce" +
    "\054\uffce\055\uffce\056\uffce\057\uffce\060\uffce\001\002\000" +
    "\030\005\047\012\044\033\036\051\050\052\041\053\045" +
    "\054\046\055\037\056\042\057\uffcf\060\240\001\002\000" +
    "\042\032\057\033\052\034\063\035\070\036\061\037\054" +
    "\040\064\041\056\042\065\043\066\044\060\045\062\046" +
    "\055\047\053\050\067\057\uffd0\001\002\000\004\005\241" +
    "\001\002\000\030\005\uffcd\012\uffcd\033\uffcd\051\uffcd\052" +
    "\uffcd\053\uffcd\054\uffcd\055\uffcd\056\uffcd\057\uffcd\060\uffcd" +
    "\001\002\000\004\012\243\001\002\000\016\006\006\007" +
    "\012\010\014\011\010\013\uffe3\064\250\001\002\000\004" +
    "\013\256\001\002\000\004\005\255\001\002\000\006\013" +
    "\uffe1\060\uffe1\001\002\000\006\013\uffe2\060\253\001\002" +
    "\000\012\006\006\007\012\010\014\011\010\001\002\000" +
    "\004\005\252\001\002\000\006\013\uffde\060\uffde\001\002" +
    "\000\014\006\006\007\012\010\014\011\010\064\250\001" +
    "\002\000\006\013\uffe0\060\uffe0\001\002\000\006\013\uffdf" +
    "\060\uffdf\001\002\000\042\005\uffff\006\006\007\012\010" +
    "\014\011\010\014\260\016\uffff\017\uffff\022\uffff\024\uffff" +
    "\025\uffff\026\uffff\027\uffff\030\uffff\061\uffff\063\013\001" +
    "\002\000\026\005\164\016\uffdd\017\161\022\153\024\152" +
    "\025\165\026\156\027\172\030\155\061\170\001\002\000" +
    "\012\006\006\007\012\010\014\011\010\001\002\000\040" +
    "\005\uffff\006\006\007\012\010\014\011\010\016\uffff\017" +
    "\uffff\022\uffff\024\uffff\025\uffff\026\uffff\027\uffff\030\uffff" +
    "\061\uffff\063\013\001\002\000\026\005\164\016\uffdd\017" +
    "\161\022\153\024\152\025\165\026\156\027\172\030\155" +
    "\061\170\001\002\000\004\016\264\001\002\000\004\015" +
    "\265\001\002\000\004\057\266\001\002\000\006\004\uffe5" +
    "\015\uffe5\001\002\000\004\016\270\001\002\000\004\015" +
    "\271\001\002\000\004\057\272\001\002\000\006\004\uffe4" +
    "\015\uffe4\001\002\000\004\004\ufffb\001\002\000\004\002" +
    "\000\001\002\000\010\031\304\057\ufff4\060\ufff4\001\002" +
    "\000\006\057\300\060\277\001\002\000\004\005\301\001" +
    "\002\000\046\004\ufffa\005\ufffa\006\ufffa\007\ufffa\010\ufffa" +
    "\011\ufffa\015\ufffa\016\ufffa\017\ufffa\021\ufffa\022\ufffa\024" +
    "\ufffa\025\ufffa\026\ufffa\027\ufffa\030\ufffa\061\ufffa\063\ufffa" +
    "\001\002\000\010\031\302\057\ufff3\060\ufff3\001\002\000" +
    "\024\005\047\012\044\033\036\051\050\052\041\053\045" +
    "\054\046\055\037\056\042\001\002\000\044\032\057\033" +
    "\052\034\063\035\070\036\061\037\054\040\064\041\056" +
    "\042\065\043\066\044\060\045\062\046\055\047\053\050" +
    "\067\057\ufff1\060\ufff1\001\002\000\024\005\047\012\044" +
    "\033\036\051\050\052\041\053\045\054\046\055\037\056" +
    "\042\001\002\000\044\032\057\033\052\034\063\035\070" +
    "\036\061\037\054\040\064\041\056\042\065\043\066\044" +
    "\060\045\062\046\055\047\053\050\067\057\ufff2\060\ufff2" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\303\000\012\002\004\003\006\006\010\011\003\001" +
    "\001\000\004\012\275\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\004\145\010\143\001\001\000\002\001" +
    "\001\000\010\003\142\006\010\011\003\001\001\000\002" +
    "\001\001\000\004\013\015\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\015\026\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\014\037\027\042\001\001\000\006\014\124\027" +
    "\042\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\014" +
    "\122\027\042\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\014\050\027\042\001\001\000" +
    "\002\001\001\000\006\014\106\027\042\001\001\000\006" +
    "\014\105\027\042\001\001\000\006\014\104\027\042\001" +
    "\001\000\006\014\103\027\042\001\001\000\006\014\102" +
    "\027\042\001\001\000\006\014\101\027\042\001\001\000" +
    "\006\014\100\027\042\001\001\000\006\014\077\027\042" +
    "\001\001\000\006\014\076\027\042\001\001\000\006\014" +
    "\075\027\042\001\001\000\006\014\074\027\042\001\001" +
    "\000\006\014\073\027\042\001\001\000\006\014\072\027" +
    "\042\001\001\000\006\014\071\027\042\001\001\000\006" +
    "\014\070\027\042\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\014\110\027\042\032\112\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\014\110" +
    "\027\042\032\117\001\001\000\002\001\001\000\010\014" +
    "\110\027\042\032\121\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\014\130\027\042\001\001" +
    "\000\002\001\001\000\006\014\132\027\042\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\014\135\027\042" +
    "\001\001\000\002\001\001\000\006\014\137\027\042\001" +
    "\001\000\002\001\001\000\006\014\141\027\042\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\004\272\010" +
    "\143\001\001\000\002\001\001\000\004\005\147\001\001" +
    "\000\010\003\150\006\010\011\003\001\001\000\002\001" +
    "\001\000\022\007\162\021\165\022\157\023\153\024\170" +
    "\025\166\026\161\027\156\001\001\000\004\031\235\001" +
    "\001\000\006\014\226\027\042\001\001\000\002\001\001" +
    "\000\006\014\224\027\042\001\001\000\006\014\223\027" +
    "\042\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\014\207\027\042\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\014\200\027\042\001\001" +
    "\000\022\007\177\021\165\022\157\023\153\024\170\025" +
    "\166\026\161\027\156\001\001\000\002\001\001\000\006" +
    "\014\174\027\042\001\001\000\002\001\001\000\006\014" +
    "\172\027\042\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\014\202\027\042" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\003\211\006\010\011\003\001\001\000\022\007" +
    "\212\021\165\022\157\023\153\024\170\025\166\026\161" +
    "\027\156\001\001\000\004\030\214\001\001\000\010\003" +
    "\217\006\010\011\003\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\022\007\220\021\165\022" +
    "\157\023\153\024\170\025\166\026\161\027\156\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\003\230\006\010\011\003\001\001\000" +
    "\022\007\231\021\165\022\157\023\153\024\170\025\166" +
    "\026\161\027\156\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\014\236" +
    "\027\042\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\011\244\016\243" +
    "\017\246\020\245\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\011\250" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\011" +
    "\244\020\253\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\003\256\006\010\011\003\001\001\000\022\007" +
    "\266\021\165\022\157\023\153\024\170\025\166\026\161" +
    "\027\156\001\001\000\004\011\260\001\001\000\010\003" +
    "\261\006\010\011\003\001\001\000\022\007\262\021\165" +
    "\022\157\023\153\024\170\025\166\026\161\027\156\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\014\302" +
    "\027\042\001\001\000\002\001\001\000\006\014\304\027" +
    "\042\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // Program ::= VarDeclList FunList Main 
            {
              Object RESULT =null;
		int varDeclListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int varDeclListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object varDeclList = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int funListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int funListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object funList = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int mainleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mainright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object main = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ProgramOP((ArrayList<VarDeclOP>) varDeclList,(ArrayList<FunOP>) funList,(BodyOP) main); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= Program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // VarDeclList ::= 
            {
              Object RESULT =null;
		 RESULT = null; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VarDeclList",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // VarDeclList ::= VarDecl VarDeclList 
            {
              Object RESULT =null;
		int varDeclleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int varDeclright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object varDecl = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int varDeclListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int varDeclListright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object varDeclList = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if (varDeclList == null) { varDeclList = new ArrayList<VarDeclOP>(); } ((ArrayList<VarDeclOP>) varDeclList).add(0, (VarDeclOP) varDecl); RESULT = varDeclList; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VarDeclList",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Main ::= MAIN VarDeclList StatList END MAIN SEMI 
            {
              Object RESULT =null;
		int varDeclListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int varDeclListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object varDeclList = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int statListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int statListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object statList = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		 RESULT = new BodyOP((ArrayList<VarDeclOP>) varDeclList,(ArrayList<StatOP>) statList); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Main",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // FunList ::= 
            {
              Object RESULT =null;
		 RESULT = null; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FunList",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // FunList ::= Fun FunList 
            {
              Object RESULT =null;
		int funleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int funright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object fun = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int funListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int funListright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object funList = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if (funList == null) { funList = new ArrayList<FunOP>(); } ((ArrayList<FunOP>) funList).add(0, (FunOP) fun); RESULT = funList; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FunList",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // VarDecl ::= Type IdListInit SEMI 
            {
              Object RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object type = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int idListInitleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idListInitright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object idListInit = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new VarDeclOP((TypeLeaf) type, (IdListInit) idListInit); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VarDecl",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // VarDecl ::= VAR IdListInitObbl SEMI 
            {
              Object RESULT =null;
		int idListInitObblleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idListInitObblright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object idListInitObbl = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new VarDeclOP((IdListInitObbl) idListInitObbl); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VarDecl",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Type ::= INTEGER 
            {
              Object RESULT =null;
		 RESULT = new TypeLeaf("int"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // Type ::= BOOL 
            {
              Object RESULT =null;
		 RESULT = new TypeLeaf("bool"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // Type ::= REAL 
            {
              Object RESULT =null;
		 RESULT = new TypeLeaf("real"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Type ::= STRING 
            {
              Object RESULT =null;
		 RESULT = new TypeLeaf("string"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // IdListInit ::= ID 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new IdListInit((IDLeaf) new IDLeaf(String.valueOf(val)), (ExprNode) null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IdListInit",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // IdListInit ::= IdListInit COMMA ID 
            {
              Object RESULT =null;
		int idListInitleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idListInitright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object idListInit = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ((IdListInit) idListInit).AddElement((IDLeaf) new IDLeaf(String.valueOf(val)), (ExprNode) null); RESULT = idListInit; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IdListInit",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // IdListInit ::= ID ASSIGN Expr 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exprNodeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exprNoderight = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object exprNode = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new IdListInit((IDLeaf) new IDLeaf(String.valueOf(val)), (ExprNode) exprNode); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IdListInit",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // IdListInit ::= IdListInit COMMA ID ASSIGN Expr 
            {
              Object RESULT =null;
		int idListInitleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idListInitright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object idListInit = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exprNodeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exprNoderight = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object exprNode = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ((IdListInit) idListInit).AddElement((IDLeaf) new IDLeaf(String.valueOf(val)), (ExprNode) exprNode); RESULT = idListInit; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IdListInit",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // IdListInitObbl ::= ID ASSIGN Expr 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ArrayList<IDLeaf> ids = new ArrayList<>(); ((ArrayList<IDLeaf>) ids).add(new IDLeaf(String.valueOf(val)));
       ArrayList<ExprNode> exprs = new ArrayList<>(); ((ArrayList<ExprNode>) exprs).add((ExprNode) e);
       RESULT = new IdListInitObbl(ids, exprs);
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IdListInitObbl",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // IdListInitObbl ::= ID COMMA ID ASSIGN Expr COMMA Expr 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ArrayList<IDLeaf> ids = new ArrayList<>(); ((ArrayList<IDLeaf>) ids).add(new IDLeaf(String.valueOf(val)));
        ((ArrayList<IDLeaf>) ids).add(new IDLeaf(String.valueOf(val2)));
        ArrayList<ExprNode> exprs = new ArrayList<>(); ((ArrayList<ExprNode>) exprs).add((ExprNode) e);
        ((ArrayList<ExprNode>) exprs).add((ExprNode) e2);
        RESULT = new IdListInitObbl(ids, exprs);
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IdListInitObbl",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // IdListInitObbl ::= ID COMMA ID COMMA ID ASSIGN Expr COMMA Expr COMMA Expr 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int val3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int val3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object val3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ArrayList<IDLeaf> ids = new ArrayList<>(); ((ArrayList<IDLeaf>) ids).add(new IDLeaf(String.valueOf(val)));
            ((ArrayList<IDLeaf>) ids).add(new IDLeaf(String.valueOf(val2)));
            ((ArrayList<IDLeaf>) ids).add(new IDLeaf(String.valueOf(val3)));
            ArrayList<ExprNode> exprs = new ArrayList<>(); ((ArrayList<ExprNode>) exprs).add((ExprNode) e);
            ((ArrayList<ExprNode>) exprs).add((ExprNode) e2);
            ((ArrayList<ExprNode>) exprs).add((ExprNode) e3);
            RESULT = new IdListInitObbl(ids, exprs);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IdListInitObbl",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // IdListInitObbl ::= IdListInitObbl COMMA ID ASSIGN Const 
            {
              Object RESULT =null;
		int idListInitObblleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idListInitObblright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object idListInitObbl = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int constLeafleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int constLeafright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object constLeaf = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ((IdListInitObbl) idListInitObbl).AddElement((IDLeaf) new IDLeaf(String.valueOf(val)), (ConstLeaf) constLeaf); RESULT = idListInitObbl; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IdListInitObbl",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Const ::= INTEGER_CONST 
            {
              Object RESULT =null;
		int intConstleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int intConstright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object intConst = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT =  new ConstLeaf("int", String.valueOf(intConst)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Const",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Const ::= REAL_CONST 
            {
              Object RESULT =null;
		int realConstleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int realConstright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object realConst = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT =  new ConstLeaf("real", String.valueOf(realConst)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Const",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Const ::= TRUE 
            {
              Object RESULT =null;
		 RESULT =  new ConstLeaf("bool", "true"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Const",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Const ::= FALSE 
            {
              Object RESULT =null;
		 RESULT =  new ConstLeaf("bool", "false"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Const",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // Const ::= STRING_CONST 
            {
              Object RESULT =null;
		int strConstleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int strConstright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object strConst = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT =  new ConstLeaf("string", String.valueOf(strConst)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Const",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // Const ::= MINUS INTEGER_CONST 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ConstLeaf("int", "-" + String.valueOf(val)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Const",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // Const ::= MINUS REAL_CONST 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ConstLeaf("real", "-" + String.valueOf(val)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Const",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // Fun ::= FUN ID LPAR ParamDeclList RPAR COLON Type VarDeclList StatList END FUN SEMI 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int paramDeclListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int paramDeclListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Object paramDeclList = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object type = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int varDeclListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int varDeclListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object varDeclList = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int statListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int statListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object statList = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		 RESULT = new FunOP((IDLeaf) new IDLeaf(String.valueOf(val)), (ArrayList<ParDeclOP>) paramDeclList, (TypeLeaf) type,(BodyOP) new BodyOP((ArrayList<VarDeclOP>) varDeclList, (ArrayList<StatOP>) statList)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Fun",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // Fun ::= FUN ID LPAR ParamDeclList RPAR VarDeclList StatList END FUN SEMI 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int paramDeclListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int paramDeclListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object paramDeclList = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int varDeclListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int varDeclListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object varDeclList = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int statListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int statListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object statList = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		 RESULT = new FunOP((IDLeaf) new IDLeaf(String.valueOf(val)), (ArrayList<ParDeclOP>) paramDeclList, new BodyOP((ArrayList<VarDeclOP>) varDeclList, (ArrayList<StatOP>) statList)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Fun",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // ParamDeclList ::= 
            {
              Object RESULT =null;
		 RESULT = null; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ParamDeclList",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // ParamDeclList ::= NonEmptyParamDeclList 
            {
              Object RESULT =null;
		int nepdlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nepdlright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object nepdl = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = nepdl;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ParamDeclList",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // NonEmptyParamDeclList ::= ParDecl 
            {
              Object RESULT =null;
		int parDeclleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int parDeclright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object parDecl = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ArrayList<ParDeclOP> nepdl = new ArrayList<ParDeclOP>(); ((ArrayList<ParDeclOP>) nepdl).add( (ParDeclOP) parDecl); RESULT = nepdl; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NonEmptyParamDeclList",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // NonEmptyParamDeclList ::= NonEmptyParamDeclList COMMA ParDecl 
            {
              Object RESULT =null;
		int nepdlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nepdlright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object nepdl = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int parDeclleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int parDeclright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object parDecl = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(nepdl == null) { nepdl = new ArrayList<ParDeclOP>(); } ((ArrayList<ParDeclOP>) nepdl).add( (ParDeclOP) parDecl); RESULT = nepdl; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NonEmptyParamDeclList",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // ParDecl ::= Type ID 
            {
              Object RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object type = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ParDeclOP(false, (TypeLeaf) type, (IDLeaf) new IDLeaf(String.valueOf(val), false) ); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ParDecl",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // ParDecl ::= OUT Type ID 
            {
              Object RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object type = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ParDeclOP(true, (TypeLeaf) type, (IDLeaf) new IDLeaf(String.valueOf(val), true) ); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ParDecl",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // StatList ::= 
            {
              Object RESULT =null;
		 RESULT = null; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("StatList",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // StatList ::= Stat StatList 
            {
              Object RESULT =null;
		int statleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int statright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object stat = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int statListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int statListright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object statList = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(statList == null) { statList = new ArrayList<StatOP>(); } ((ArrayList<StatOP>) statList).add(0, (StatOP) stat); RESULT = statList; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("StatList",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // Stat ::= IfStat SEMI 
            {
              Object RESULT =null;
		int ifopleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int ifopright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object ifop = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new StatOP((IfOP) ifop); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stat",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // Stat ::= WhileStat SEMI 
            {
              Object RESULT =null;
		int whileopleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int whileopright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object whileop = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new StatOP((WhileOP) whileop); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stat",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // Stat ::= ReadStat SEMI 
            {
              Object RESULT =null;
		int readopleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int readopright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object readop = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new StatOP((ReadStatOP) readop); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stat",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // Stat ::= WriteStat SEMI 
            {
              Object RESULT =null;
		int writeopleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int writeopright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object writeop = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new StatOP((WriteStatOP) writeop); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stat",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // Stat ::= AssignStat SEMI 
            {
              Object RESULT =null;
		int assignopleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int assignopright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object assignop = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new StatOP((AssignStatOP) assignop); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stat",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // Stat ::= CallFun SEMI 
            {
              Object RESULT =null;
		int callFunleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int callFunright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object callFun = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new StatOP((CallFunOP) callFun); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stat",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // Stat ::= RETURN Expr SEMI 
            {
              Object RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object expr = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new StatOP((ExprNode) expr); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stat",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // IfStat ::= IF Expr THEN VarDeclList StatList Else END IF 
            {
              Object RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object expr = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int varDeclListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int varDeclListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object varDeclList = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int statListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int statListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object statList = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int elseopleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int elseopright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object elseop = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new IfOP((ExprNode) expr, new BodyOP((ArrayList<VarDeclOP>) varDeclList, (ArrayList<StatOP>) statList), (ElseOP) elseop); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IfStat",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // Else ::= 
            {
              Object RESULT =null;
		 RESULT = null; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Else",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // Else ::= ELSE VarDeclList StatList 
            {
              Object RESULT =null;
		int varDeclListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int varDeclListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object varDeclList = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int statListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int statListright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object statList = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ElseOP(new BodyOP((ArrayList<VarDeclOP>) varDeclList, (ArrayList<StatOP>) statList)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Else",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // WhileStat ::= WHILE Expr LOOP VarDeclList StatList END LOOP 
            {
              Object RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object expr = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int varDeclListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int varDeclListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object varDeclList = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int statListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int statListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object statList = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new WhileOP((ExprNode) expr, new BodyOP((ArrayList<VarDeclOP>) varDeclList, (ArrayList<StatOP>) statList)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("WhileStat",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // ReadStat ::= READ IdList Expr 
            {
              Object RESULT =null;
		int idListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object idList = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object expr = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ReadStatOP((ArrayList<IDLeaf>) idList, (ExprNode) expr); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ReadStat",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // ReadStat ::= READ IdList 
            {
              Object RESULT =null;
		int idListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idListright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object idList = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ReadStatOP((ArrayList<IDLeaf>) idList, (ExprNode) null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ReadStat",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // IdList ::= ID 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ArrayList<IDLeaf> idList = new ArrayList<IDLeaf>(); ((ArrayList<IDLeaf>) idList).add(0, new IDLeaf(String.valueOf(val))); RESULT = idList; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IdList",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // IdList ::= IdList COMMA ID 
            {
              Object RESULT =null;
		int idListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object idList = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ((ArrayList<IDLeaf>) idList).add(0, new IDLeaf(String.valueOf(val))); RESULT = idList; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IdList",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // WriteStat ::= WRITE Expr 
            {
              Object RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object expr = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new WriteStatOP("WriteOP", (ExprNode) expr);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("WriteStat",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // WriteStat ::= WRITELN Expr 
            {
              Object RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object expr = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new WriteStatOP("WriteLn", (ExprNode) expr);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("WriteStat",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // WriteStat ::= WRITET Expr 
            {
              Object RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object expr = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new WriteStatOP("WriteT", (ExprNode) expr);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("WriteStat",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // WriteStat ::= WRITEB Expr 
            {
              Object RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object expr = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new WriteStatOP("WriteB", (ExprNode) expr);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("WriteStat",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // AssignStat ::= ID ASSIGN Expr 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object expr = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new AssignStatOP((IDLeaf) new IDLeaf(String.valueOf(val)), (ExprNode) expr);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("AssignStat",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // CallFun ::= ID LPAR ExprList RPAR 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int exprListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int exprListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object exprList = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new CallFunOP(new IDLeaf(String.valueOf(val)), (ArrayList<ExprNode>) exprList); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CallFun",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // CallFun ::= ID LPAR RPAR 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new CallFunOP(new IDLeaf(String.valueOf(val)), (ArrayList<ExprNode>) null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CallFun",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // ExprList ::= Expr 
            {
              Object RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object expr = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ArrayList<ExprNode> exprList = new ArrayList<ExprNode>(); ((ArrayList<ExprNode>) exprList).add(0, (ExprNode) expr); RESULT = exprList; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ExprList",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // ExprList ::= Expr COMMA ExprList 
            {
              Object RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object expr = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exprListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exprListright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object exprList = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ((ArrayList<ExprNode>) exprList).add(0, (ExprNode) expr); RESULT = exprList; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ExprList",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // ExprList ::= OUTPAR ID 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ArrayList<ExprNode> exprList = new ArrayList<ExprNode>(); ((ArrayList<ExprNode>) exprList).add(0, (IDLeaf) new IDLeaf(String.valueOf(val), true)); RESULT = exprList; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ExprList",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // ExprList ::= OUTPAR ID COMMA ExprList 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exprListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exprListright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object exprList = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ((ArrayList<ExprNode>) exprList).add(0, (IDLeaf) new IDLeaf(String.valueOf(val), true)); RESULT = exprList; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ExprList",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // Expr ::= INTEGER_CONST 
            {
              Object RESULT =null;
		int intConstleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int intConstright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object intConst = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT =  new ConstLeaf("int", String.valueOf(intConst)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // Expr ::= REAL_CONST 
            {
              Object RESULT =null;
		int realConstleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int realConstright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object realConst = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT =  new ConstLeaf("real", String.valueOf(realConst)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // Expr ::= TRUE 
            {
              Object RESULT =null;
		 RESULT =  new ConstLeaf("bool", "true"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // Expr ::= FALSE 
            {
              Object RESULT =null;
		 RESULT =  new ConstLeaf("bool", "false"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // Expr ::= STRING_CONST 
            {
              Object RESULT =null;
		int strConstleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int strConstright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object strConst = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT =  new ConstLeaf("string", String.valueOf(strConst)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // Expr ::= ID 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new IDLeaf(String.valueOf(val)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // Expr ::= CallFun 
            {
              Object RESULT =null;
		int callFunleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int callFunright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object callFun = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = callFun; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // Expr ::= Expr PLUS Expr 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BinaryOP("PlusOP", (ExprNode) e1, (ExprNode) e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // Expr ::= Expr MINUS Expr 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BinaryOP("MinusOP", (ExprNode) e1, (ExprNode) e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // Expr ::= Expr TIMES Expr 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BinaryOP("TimesOP", (ExprNode) e1, (ExprNode) e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // Expr ::= Expr DIV Expr 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BinaryOP("DivOP", (ExprNode) e1, (ExprNode) e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // Expr ::= Expr DIVINT Expr 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BinaryOP("DivIntOP", (ExprNode) e1, (ExprNode) e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // Expr ::= Expr AND Expr 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BinaryOP("AndOP", (ExprNode) e1, (ExprNode) e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // Expr ::= Expr POW Expr 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BinaryOP("PowOP", (ExprNode) e1, (ExprNode) e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // Expr ::= Expr STR_CONCAT Expr 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BinaryOP("StrConcatOP", (ExprNode) e1, (ExprNode) e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // Expr ::= Expr OR Expr 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BinaryOP("OrOP", (ExprNode) e1, (ExprNode) e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // Expr ::= Expr GT Expr 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BinaryOP("GtOP", (ExprNode) e1, (ExprNode) e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // Expr ::= Expr GE Expr 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BinaryOP("GeOP", (ExprNode) e1, (ExprNode) e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // Expr ::= Expr LT Expr 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BinaryOP("LtOP", (ExprNode) e1, (ExprNode) e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // Expr ::= Expr LE Expr 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BinaryOP("LeOP", (ExprNode) e1, (ExprNode) e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // Expr ::= Expr EQ Expr 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BinaryOP("EqOP", (ExprNode) e1, (ExprNode) e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // Expr ::= Expr NE Expr 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BinaryOP("NeOP", (ExprNode) e1, (ExprNode) e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // Expr ::= MINUS Expr 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new UnaryOP("UMinusOP", (ExprNode) e1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // Expr ::= NOT Expr 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new UnaryOP("NotOP", (ExprNode) e1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // Expr ::= LPAR Expr RPAR 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new UnaryOP("ParOP", (ExprNode) e1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
